{"version":3,"file":"js/919.f7b60ba4.js","mappings":"qOAKO,SAASA,EAAYC,EAAWC,GACrC,MAAMC,EAAQ,IAAIC,KAQlB,SAASC,IACP,MAAMC,EAAIC,KAAKC,MAAsB,IAAhBD,KAAKE,UACpBC,EAAIH,KAAKC,MAAsB,IAAhBD,KAAKE,UACpBE,EAAIJ,KAAKC,MAAsB,IAAhBD,KAAKE,UACpBG,EAAQ,IAAMN,EAAEO,SAAS,IAAMH,EAAEG,SAAS,IAAMF,EAAEE,SAAS,IACjE,OAAOD,CACT,CAEA,SAASE,EAASZ,GAChB,GAAIA,EAAKa,OAAS,EAChB,IAAK,IAAIC,EAAI,EAAGA,EAAId,EAAKa,OAAQC,IAAK,CACpC,MAAMC,EAAKf,EAAKc,GAChBb,EAAMe,QAAQD,EAAGE,KAAM,CACrBC,KAAMH,EAAGI,SAASD,KAClBE,MAAOL,EAAGI,SAASC,MACnBV,MAAOP,MAETF,EAAMoB,QAAQN,EAAGE,KAAMF,EAAGO,OAAQ,CAChCC,KAAMR,EAAGI,SAASI,KAClBH,MAAOL,EAAGI,SAASK,UACnBN,KAAMH,EAAGI,SAASD,KAClBR,MAAO,YAGLK,EAAGU,UACLb,EAASG,EAAGU,SAEhB,CAEJ,CAnCAxB,EAAMe,QAAQhB,EAAKiB,KAAM,CACvBC,KAAMlB,EAAKmB,SAASD,KACpBE,MAAOpB,EAAKmB,SAASC,MACrBV,MAAOP,MAkCTS,EAASZ,EAAKyB,UAEdxB,EAAMyB,QAAQC,SAAQ,CAACC,EAAMd,KAC3B,MAAMe,EAAa,EAAJf,EAAQT,KAAKyB,GAAM7B,EAAM8B,MACxC9B,EAAM+B,iBAAiBJ,EAAM,IAAK,IAAMvB,KAAK4B,IAAIJ,IACjD5B,EAAM+B,iBAAiBJ,EAAM,IAAK,IAAMvB,KAAK6B,IAAIL,GAAO,IAIzC,IAAIM,IAAJ,CAAUlC,EAAOF,EAAW,CAC3CqC,kBAAkB,EAClBC,uBAAuB,IAFzB,MAKMC,EAAS,IAAIC,IAAJ,CAAoBtC,GACnCqC,EAAOE,OACT,C","sources":["webpack://semantictree/./src/lib/sigma.js"],"sourcesContent":["import Graph from \"graphology\";\r\nimport Sigma from \"sigma\";\r\n\r\nimport ForceSupervisor from \"graphology-layout-force/worker\";\r\n\r\nexport function createGraph(container, data) {\r\n  const graph = new Graph();\r\n\r\n  graph.addNode(data.name, {\r\n    size: data.settings.size,\r\n    label: data.settings.label,\r\n    color: rndColor(),\r\n  });\r\n\r\n  function rndColor() {\r\n    const r = Math.floor(Math.random() * 256);\r\n    const g = Math.floor(Math.random() * 256);\r\n    const b = Math.floor(Math.random() * 256);\r\n    const color = \"#\" + r.toString(16) + g.toString(16) + b.toString(16);\r\n    return color;\r\n  }\r\n\r\n  function setNodes(data) {\r\n    if (data.length > 0) {\r\n      for (let i = 0; i < data.length; i++) {\r\n        const el = data[i];\r\n        graph.addNode(el.name, {\r\n          size: el.settings.size,\r\n          label: el.settings.label,\r\n          color: rndColor(),\r\n        });\r\n        graph.addEdge(el.name, el.parent, {\r\n          type: el.settings.type,\r\n          label: el.settings.labelLink,\r\n          size: el.settings.size,\r\n          color: \"#8790a3\",\r\n        });\r\n\r\n        if (el.children) {\r\n          setNodes(el.children);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  setNodes(data.children);\r\n\r\n  graph.nodes().forEach((node, i) => {\r\n    const angle = (i * 2 * Math.PI) / graph.order;\r\n    graph.setNodeAttribute(node, \"x\", 100 * Math.cos(angle));\r\n    graph.setNodeAttribute(node, \"y\", 100 * Math.sin(angle));\r\n  });\r\n\r\n  // eslint-disable-next-line no-unused-vars\r\n  const renderer = new Sigma(graph, container, {\r\n    renderEdgeLabels: true,\r\n    allowInvalidContainer: true,\r\n  });\r\n\r\n  const layout = new ForceSupervisor(graph);\r\n  layout.start();\r\n}\r\n"],"names":["createGraph","container","data","graph","Graph","rndColor","r","Math","floor","random","g","b","color","toString","setNodes","length","i","el","addNode","name","size","settings","label","addEdge","parent","type","labelLink","children","nodes","forEach","node","angle","PI","order","setNodeAttribute","cos","sin","Sigma","renderEdgeLabels","allowInvalidContainer","layout","ForceSupervisor","start"],"sourceRoot":""}