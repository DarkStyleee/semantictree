{"version":3,"file":"js/448.c107e87c.js","mappings":"yOAKO,SAASA,EAAYC,EAAWC,GACrC,MAAMC,EAAQ,IAAIC,KAGlB,SAASC,IACP,MAAMC,EAAIC,KAAKC,MAAsB,IAAhBD,KAAKE,UACpBC,EAAIH,KAAKC,MAAsB,IAAhBD,KAAKE,UACpBE,EAAIJ,KAAKC,MAAsB,IAAhBD,KAAKE,UACpBG,EAAQ,IAAMN,EAAEO,SAAS,IAAMH,EAAEG,SAAS,IAAMF,EAAEE,SAAS,IACjE,OAAOD,CACT,CARAT,EAAMW,OAAOZ,GAUbC,EAAMY,QAAQC,SAAQ,CAACC,EAAMC,KAC3B,MAAMC,EAAa,EAAJD,EAAQX,KAAKa,GAAMjB,EAAMkB,MACxClB,EAAMmB,iBAAiBL,EAAM,QAASZ,KACtCF,EAAMmB,iBAAiBL,EAAM,IAAK,IAAMV,KAAKgB,IAAIJ,IACjDhB,EAAMmB,iBAAiBL,EAAM,IAAK,IAAMV,KAAKiB,IAAIL,GAAO,IAG1D,MAAMM,EAAW,IAAIC,IAAJ,CAAUvB,EAAOF,EAAW,CAC3C0B,kBAAkB,EAClBC,uBAAuB,IAGnBC,EAAS,IAAIC,IAAJ,CAAoB3B,GACnC0B,EAAOE,QAEP,MAAMC,EAAQ,CAAEC,YAAa,IAE7B,SAASC,EAAejB,EAAO,MACzBA,GACFe,EAAMG,YAAclB,EACpBe,EAAMI,iBAAmB,IAAIC,IAAIlC,EAAMmC,UAAUrB,MAEjDe,EAAMG,iBAAcI,EACpBP,EAAMI,sBAAmBG,GAG3Bd,EAASe,SACX,CAEAf,EAASgB,GAAG,aAAa,EAAGxB,WAC1BiB,EAAejB,EAAK,IAEtBQ,EAASgB,GAAG,aAAa,KACvBP,OAAeK,EAAU,IAG3Bd,EAASiB,WAAW,eAAe,CAACzB,EAAMf,KACxC,MAAMyC,EAAM,IAAKzC,GAkBjB,OAfE8B,EAAMI,mBACLJ,EAAMI,iBAAiBQ,IAAI3B,IAC5Be,EAAMG,cAAgBlB,IAEtB0B,EAAIE,MAAQ,GACZF,EAAI/B,MAAQ,WAGVoB,EAAMc,eAAiB7B,EACzB0B,EAAII,aAAc,EACTf,EAAMgB,cAAgBhB,EAAMgB,YAAYJ,IAAI3B,KACrD0B,EAAIE,MAAQ,GACZF,EAAI/B,MAAQ,WAGP+B,CAAG,IAGZlB,EAASiB,WAAW,eAAe,CAACO,EAAM/C,KACxC,MAAMyC,EAAM,IAAKzC,GAcjB,OAZI8B,EAAMG,cAAgBhC,EAAM+C,aAAaD,EAAMjB,EAAMG,eACvDQ,EAAIQ,QAAS,IAIbnB,EAAMgB,aACJhB,EAAMgB,YAAYJ,IAAIzC,EAAMiD,OAAOH,KAClCjB,EAAMgB,YAAYJ,IAAIzC,EAAMkD,OAAOJ,MAEtCN,EAAIQ,QAAS,GAGRR,CAAG,GAEd,C,qJCnFA,MAAMW,GAAQC,EAAAA,EAAAA,MAERC,GAAYC,EAAAA,EAAAA,KAAS,IAAMH,EAAMI,QAAQC,cAE/CC,QAAQC,IAAIL,GACZ,MAAMM,GAAWC,EAAAA,EAAAA,M,OAEjBC,EAAAA,EAAAA,KAAU,MACRhE,EAAAA,EAAAA,aAAY8D,EAASG,MAAOT,EAAUS,MAAM,I,gGCd9C,MAAMC,EAAc,EAEpB,O","sources":["webpack://semantictree/./src/lib/sigma2.js","webpack://semantictree/./src/views/SemanticTreeView.vue","webpack://semantictree/./src/views/SemanticTreeView.vue?7781"],"sourcesContent":["import Sigma from \"sigma\";\r\nimport Graph from \"graphology\";\r\n\r\nimport ForceSupervisor from \"graphology-layout-force/worker\";\r\n\r\nexport function createGraph(container, data) {\r\n  const graph = new Graph();\r\n  graph.import(data);\r\n\r\n  function rndColor() {\r\n    const r = Math.floor(Math.random() * 256);\r\n    const g = Math.floor(Math.random() * 256);\r\n    const b = Math.floor(Math.random() * 256);\r\n    const color = \"#\" + r.toString(16) + g.toString(16) + b.toString(16);\r\n    return color;\r\n  }\r\n\r\n  graph.nodes().forEach((node, i) => {\r\n    const angle = (i * 2 * Math.PI) / graph.order;\r\n    graph.setNodeAttribute(node, \"color\", rndColor());\r\n    graph.setNodeAttribute(node, \"x\", 100 * Math.cos(angle));\r\n    graph.setNodeAttribute(node, \"y\", 100 * Math.sin(angle));\r\n  });\r\n\r\n  const renderer = new Sigma(graph, container, {\r\n    renderEdgeLabels: true,\r\n    allowInvalidContainer: true,\r\n  });\r\n\r\n  const layout = new ForceSupervisor(graph);\r\n  layout.start();\r\n\r\n  const state = { searchQuery: \"\" };\r\n\r\n  function setHoveredNode(node = null) {\r\n    if (node) {\r\n      state.hoveredNode = node;\r\n      state.hoveredNeighbors = new Set(graph.neighbors(node));\r\n    } else {\r\n      state.hoveredNode = undefined;\r\n      state.hoveredNeighbors = undefined;\r\n    }\r\n\r\n    renderer.refresh();\r\n  }\r\n\r\n  renderer.on(\"enterNode\", ({ node }) => {\r\n    setHoveredNode(node);\r\n  });\r\n  renderer.on(\"leaveNode\", () => {\r\n    setHoveredNode(undefined);\r\n  });\r\n\r\n  renderer.setSetting(\"nodeReducer\", (node, data) => {\r\n    const res = { ...data };\r\n\r\n    if (\r\n      state.hoveredNeighbors &&\r\n      !state.hoveredNeighbors.has(node) &&\r\n      state.hoveredNode !== node\r\n    ) {\r\n      res.label = \"\";\r\n      res.color = \"#f6f6f6\";\r\n    }\r\n\r\n    if (state.selectedNode === node) {\r\n      res.highlighted = true;\r\n    } else if (state.suggestions && !state.suggestions.has(node)) {\r\n      res.label = \"\";\r\n      res.color = \"#f6f6f6\";\r\n    }\r\n\r\n    return res;\r\n  });\r\n\r\n  renderer.setSetting(\"edgeReducer\", (edge, data) => {\r\n    const res = { ...data };\r\n\r\n    if (state.hoveredNode && !graph.hasExtremity(edge, state.hoveredNode)) {\r\n      res.hidden = true;\r\n    }\r\n\r\n    if (\r\n      state.suggestions &&\r\n      (!state.suggestions.has(graph.source(edge)) ||\r\n        !state.suggestions.has(graph.target(edge)))\r\n    ) {\r\n      res.hidden = true;\r\n    }\r\n\r\n    return res;\r\n  });\r\n}\r\n","<template>\r\n  <div class=\"semantic-tree\" ref=\"semantic\"></div>\r\n</template>\r\n\r\n<script setup>\r\nimport { createGraph } from \"@/lib/sigma2\";\r\nimport { ref, onMounted, computed } from \"vue\";\r\nimport { useStore } from \"vuex\";\r\n\r\nconst store = useStore();\r\n\r\nconst graphData = computed(() => store.getters.getGlossary);\r\n\r\nconsole.log(graphData);\r\nconst semantic = ref();\r\n\r\nonMounted(() => {\r\n  createGraph(semantic.value, graphData.value);\r\n});\r\n</script>\r\n\r\n<style></style>\r\n","import script from \"./SemanticTreeView.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./SemanticTreeView.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__"],"names":["createGraph","container","data","graph","Graph","rndColor","r","Math","floor","random","g","b","color","toString","import","nodes","forEach","node","i","angle","PI","order","setNodeAttribute","cos","sin","renderer","Sigma","renderEdgeLabels","allowInvalidContainer","layout","ForceSupervisor","start","state","searchQuery","setHoveredNode","hoveredNode","hoveredNeighbors","Set","neighbors","undefined","refresh","on","setSetting","res","has","label","selectedNode","highlighted","suggestions","edge","hasExtremity","hidden","source","target","store","useStore","graphData","computed","getters","getGlossary","console","log","semantic","ref","onMounted","value","__exports__"],"sourceRoot":""}