"use strict";(self["webpackChunksemantictree"]=self["webpackChunksemantictree"]||[]).push([[448,202],{7202:function(e,t,o){o.r(t),o.d(t,{createGraph:function(){return h}});var r=o(4886),n=o.n(r),s=o(2965),a=o.n(s),i=o(2563),d=o.n(i);function h(e,t){const o=new(a());function r(){const e=Math.floor(256*Math.random()),t=Math.floor(256*Math.random()),o=Math.floor(256*Math.random()),r="#"+e.toString(16)+t.toString(16)+o.toString(16);return r}o.import(t),o.nodes().forEach(((e,t)=>{const n=2*t*Math.PI/o.order;o.setNodeAttribute(e,"color",r()),o.setNodeAttribute(e,"x",100*Math.cos(n)),o.setNodeAttribute(e,"y",100*Math.sin(n))}));const s=new(n())(o,e,{renderEdgeLabels:!0,allowInvalidContainer:!0}),i=new(d())(o);i.start();const h={searchQuery:""};function c(e=null){e?(h.hoveredNode=e,h.hoveredNeighbors=new Set(o.neighbors(e))):(h.hoveredNode=void 0,h.hoveredNeighbors=void 0),s.refresh()}s.on("enterNode",(({node:e})=>{c(e)})),s.on("leaveNode",(()=>{c(void 0)})),s.setSetting("nodeReducer",((e,t)=>{const o={...t};return h.hoveredNeighbors&&!h.hoveredNeighbors.has(e)&&h.hoveredNode!==e&&(o.label="",o.color="#f6f6f6"),h.selectedNode===e?o.highlighted=!0:h.suggestions&&!h.suggestions.has(e)&&(o.label="",o.color="#f6f6f6"),o})),s.setSetting("edgeReducer",((e,t)=>{const r={...t};return h.hoveredNode&&!o.hasExtremity(e,h.hoveredNode)&&(r.hidden=!0),!h.suggestions||h.suggestions.has(o.source(e))&&h.suggestions.has(o.target(e))||(r.hidden=!0),r}))}},448:function(e,t,o){o.r(t),o.d(t,{default:function(){return h}});var r=o(3396),n=o(7202),s=o(4870),a=o(7139),i={__name:"SemanticTreeView",setup(e){const t=(0,a.oR)(),o=(0,r.Fl)((()=>t.getters.getGlossary));console.log(o);const i=(0,s.iH)();return(0,r.bv)((()=>{(0,n.createGraph)(i.value,o.value)})),(e,t)=>((0,r.wg)(),(0,r.iD)("div",{class:"semantic-tree",ref_key:"semantic",ref:i},null,512))}};const d=i;var h=d}}]);
//# sourceMappingURL=448.c107e87c.js.map